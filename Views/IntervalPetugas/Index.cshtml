@model List<AparWebAdmin.Models.IntervalPetugas>

@{
    ViewData["Title"] = "Interval Management";
}

<!-- Page Header Modern -->
<div class="page-header-modern bg-primary text-white py-4 mb-4">
    <div class="container-fluid d-flex flex-wrap justify-content-between align-items-center">
        <div class="d-flex align-items-center mb-3 mb-md-0">
            <i class="bi bi-clock-history display-6 me-3"></i>
            <div>
                <h1 class="h3 mb-1">Interval Management</h1>
                <p class="mb-0 opacity-75">Manage staff inspection intervals and schedules</p>
            </div>
        </div>
        <div class="d-flex flex-wrap align-items-center gap-3">
            <div class="input-group search-box-modern">
                <span class="input-group-text bg-white border-end-0"><i class="bi bi-search text-muted"></i></span>
                <input type="text" id="intervalSearch" class="form-control border-start-0" placeholder="Search intervals..." />
                <button class="btn btn-outline-secondary search-clear d-none" id="clearSearch">
                    <i class="bi bi-x"></i>
                </button>
            </div>
            <button class="btn btn-outline-light" onclick="exportIntervals()">
                <i class="bi bi-download me-1"></i>Export
            </button>
            <a href="@Url.Action("Create")" class="btn btn-light btn-glow">
                <i class="bi bi-plus-lg me-1"></i>Add Interval
            </a>
        </div>
    </div>
</div>

<!-- Stats Cards Row -->
<div class="container-fluid">
    <div class="row g-3 mb-4 stats-row">
        <div class="col-xl-3 col-md-6">
            <div class="stat-card stat-primary d-flex align-items-center p-3">
                <div class="stat-icon me-3">
                    <i class="bi bi-calendar-check"></i>
                </div>
                <div class="flex-fill">
                    <div class="stat-number">@Model.Count</div>
                    <div class="stat-label">Total Intervals</div>
                </div>
                <div class="stat-trend text-success d-flex align-items-center">
                    <i class="bi bi-arrow-up me-1"></i><small>+3</small>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6">
            <div class="stat-card stat-success d-flex align-items-center p-3">
                <div class="stat-icon me-3">
                    <i class="bi bi-arrow-repeat"></i>
                </div>
                <div class="flex-fill">
                    <div class="stat-number">@Model.Where(i => i.Bulan > 0).Count()</div>
                    <div class="stat-label">Regular Intervals</div>
                </div>
                <div class="stat-trend text-success d-flex align-items-center">
                    <i class="bi bi-check-circle me-1"></i><small>Active</small>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6">
            <div class="stat-card stat-warning d-flex align-items-center p-3">
                <div class="stat-icon me-3">
                    <i class="bi bi-gear"></i>
                </div>
                <div class="flex-fill">
                    <div class="stat-number">@Model.Where(i => i.Bulan == 0).Count()</div>
                    <div class="stat-label">Custom Intervals</div>
                </div>
                <div class="stat-trend text-warning d-flex align-items-center">
                    <i class="bi bi-tools me-1"></i><small>Flexible</small>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6">
            <div class="stat-card stat-info d-flex align-items-center p-3">
                <div class="stat-icon me-3">
                    <i class="bi bi-calendar2-range"></i>
                </div>
                <div class="flex-fill">
                    <div class="stat-number">
                        @(Model.Where(i => i.Bulan > 0).Any() 
                            ? Model.Where(i => i.Bulan > 0).Average(i => i.Bulan ?? 0).ToString("F1") 
                            : "0")
                    </div>
                    <div class="stat-label">Avg Months</div>
                </div>
                <div class="stat-trend text-info d-flex align-items-center">
                    <i class="bi bi-graph-up me-1"></i><small>Trend</small>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Alert Messages -->
<div class="container-fluid">
    @if (ViewBag.Error != null)
    {
        <div class="alert alert-danger alert-modern d-flex align-items-center">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>@ViewBag.Error
        </div>
    }
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-modern d-flex align-items-center">
            <i class="bi bi-check-circle-fill me-2"></i>@TempData["Success"]
        </div>
    }
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-modern d-flex align-items-center">
            <i class="bi bi-x-circle-fill me-2"></i>@TempData["Error"]
        </div>
    }
</div>

<!-- Main Data Table -->
<div class="container-fluid data-table-container">
    <div class="table-header d-flex flex-wrap justify-content-between align-items-center mb-3">
        <div class="table-title">
            <h5 class="mb-1">Interval Directory</h5>
            <small class="text-muted">@Model.Count intervals configured</small>
        </div>
        <div class="table-controls d-flex align-items-center gap-2">
            <div class="view-toggle btn-group btn-group-sm">
                <button class="btn btn-outline-secondary active" data-view="table">
                    <i class="bi bi-table"></i>
                </button>
                <button class="btn btn-outline-secondary" data-view="grid">
                    <i class="bi bi-grid-3x3-gap"></i>
                </button>
            </div>
            <div class="density-control">
                <select class="form-select form-select-sm" id="tableDensity">
                    <option value="comfortable">Comfortable</option>
                    <option value="compact">Compact</option>
                    <option value="spacious">Spacious</option>
                </select>
            </div>
        </div>
    </div>

    @if (Model.Count > 0)
    {
        <!-- Table View -->
        <div class="table-responsive" id="tableView">
            <table class="table table-modern table-hover" id="intervalsTable">
                <thead>
                    <tr>
                        <th class="sortable" data-sort="id">
                            <div class="th-content d-flex align-items-center">
                                <span>ID</span><i class="bi bi-arrow-down-up sort-icon ms-1"></i>
                            </div>
                        </th>
                        <th class="sortable" data-sort="name">
                            <div class="th-content d-flex align-items-center">
                                <span>Interval Name</span><i class="bi bi-arrow-down-up sort-icon ms-1"></i>
                            </div>
                        </th>
                        <th class="sortable" data-sort="months">
                            <div class="th-content d-flex align-items-center">
                                <span>Months</span><i class="bi bi-arrow-down-up sort-icon ms-1"></i>
                            </div>
                        </th>
                        <th>Description</th>
                        <th>Usage</th>
                        <th class="text-center">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.OrderBy(i => i.Bulan).ThenBy(i => i.NamaInterval))
                    {
                        <tr class="table-row" data-interval-id="@item.Id">
                            <td>
                                <span class="id-badge">#@item.Id</span>
                            </td>
                            <td>
                                <div class="interval-info">
                                    <div class="interval-name d-flex align-items-center">
                                        <i class="bi bi-clock text-primary me-2"></i>@item.NamaInterval
                                    </div>
                                    <div class="interval-meta">
                                        @if (item.Bulan == 0)
                                        {
                                            <span class="badge bg-warning">Custom</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-success">Regular</span>
                                        }
                                    </div>
                                </div>
                            </td>
                            <td>
                                @if (item.Bulan == 0)
                                {
                                    <span class="text-muted d-flex align-items-center">
                                        <i class="bi bi-infinity me-1"></i>Flexible
                                    </span>
                                }
                                else
                                {
                                    <div class="months-display">
                                        <span class="months-number">@item.Bulan</span>
                                        <span class="months-label">months</span>
                                    </div>
                                }
                            </td>
                            <td>
                                <div class="description-text">@item.Deskripsi</div>
                            </td>
                            <td>
                                <div class="usage-info">
                                    <span class="usage-count">@(Random.Shared.Next(0, 10))</span>
                                    <span class="usage-label">staff assigned</span>
                                </div>
                            </td>
                            <td>
                                <div class="action-buttons-modern d-flex justify-content-center">
                                    <div class="btn-group btn-group-sm me-1">
                                        <a href="@Url.Action("Edit", new { id = item.Id })"
                                           class="btn btn-warning" title="Edit Interval">
                                            <i class="bi bi-pencil"></i>
                                        </a>
                                        <button class="btn btn-danger" title="Delete Interval"
                                                onclick="confirmDelete(@item.Id, '@Html.Raw(Html.Encode(item.NamaInterval))')">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                    <div class="dropdown">
                                        <button class="btn btn-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown">
                                            <i class="bi bi-three-dots"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end">
                                            <li><a class="dropdown-item" href="#"><i class="bi bi-people me-2"></i>View Staff</a></li>
                                            <li><a class="dropdown-item" href="#"><i class="bi bi-clipboard-data me-2"></i>Usage Statistics</a></li>
                                            <li><hr class="dropdown-divider"></li>
                                            <li><a class="dropdown-item" href="#"><i class="bi bi-copy me-2"></i>Duplicate</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Grid View -->
        <div class="grid-view d-none" id="gridView">
            <div class="row g-4">
                @foreach (var item in Model.Take(12))
                {
                    <div class="col-xl-3 col-lg-4 col-md-6">
                        <div class="interval-card">
                            <div class="interval-card-header d-flex justify-content-between align-items-center">
                                <div class="interval-icon"><i class="bi bi-clock"></i></div>
                                <div class="interval-status">
                                    @if (item.Bulan == 0)
                                    {
                                        <span class="badge bg-warning">Custom</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-success">Regular</span>
                                    }
                                </div>
                            </div>
                            <div class="interval-card-body">
                                <h6 class="interval-name">@item.NamaInterval</h6>
                                <p class="interval-desc text-truncate">@item.Deskripsi</p>
                                <div class="interval-stats d-flex align-items-center">
                                    <i class="bi bi-people text-primary me-1"></i>
                                    <small>@(Random.Shared.Next(0, 10)) Staff</small>
                                </div>
                            </div>
                            <div class="interval-card-footer d-flex">
                                <a href="@Url.Action("Edit", new { id = item.Id })" class="btn btn-outline-primary btn-sm flex-fill me-1">
                                    <i class="bi bi-pencil"></i>
                                </a>
                                <button class="btn btn-outline-danger btn-sm flex-fill" onclick="confirmDelete(@item.Id, '@Html.Raw(Html.Encode(item.NamaInterval))')">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Advanced Pagination -->
        <div class="pagination-modern d-flex flex-wrap justify-content-between align-items-center mt-4">
            <div class="d-flex align-items-center gap-2 mb-2 mb-md-0">
                <select class="form-select form-select-sm" id="pageSize">
                    <option value="10">10 per page</option>
                    <option value="25" selected>25 per page</option>
                    <option value="50">50 per page</option>
                </select>
                <span class="showing-info">
                    Showing <strong>1-@Math.Min(25, Model.Count)</strong> of <strong>@Model.Count</strong> intervals
                </span>
            </div>
            <nav>
                <ul class="pagination pagination-modern mb-0">
                    <li class="page-item disabled"><a href="#" class="page-link"><i class="bi bi-chevron-double-left"></i></a></li>
                    <li class="page-item disabled"><a href="#" class="page-link"><i class="bi bi-chevron-left"></i></a></li>
                    <li class="page-item active"><a href="#" class="page-link">1</a></li>
                    <li class="page-item"><a href="#" class="page-link">2</a></li>
                    <li class="page-item"><a href="#" class="page-link"><i class="bi bi-chevron-right"></i></a></li>
                    <li class="page-item"><a href="#" class="page-link"><i class="bi bi-chevron-double-right"></i></a></li>
                </ul>
            </nav>
        </div>
    }
    else
    {
        <div class="empty-state text-center py-5">
            <div class="empty-state-icon mb-3"><i class="bi bi-clock-history"></i></div>
            <h5 class="empty-state-title mb-2">No Intervals Found</h5>
            <p class="empty-state-text mb-4">Get started by creating your first inspection interval</p>
            <a href="@Url.Action("Create")" class="btn btn-primary btn-glow">
                <i class="bi bi-plus-lg me-1"></i>Create First Interval
            </a>
        </div>
    }
</div>

<!-- Enhanced Delete Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content modal-modern">
            <div class="modal-header border-0 justify-content-center">
                <div class="modal-icon-danger text-danger fs-1">
                    <i class="bi bi-exclamation-triangle-fill"></i>
                </div>
            </div>
            <div class="modal-body text-center">
                <h5 class="modal-title mb-2">Confirm Deletion</h5>
                <p class="modal-text mb-3">
                    Are you sure you want to delete interval
                    <strong id="deleteIntervalName"></strong>?
                </p>
                <div class="alert alert-warning d-flex align-items-center">
                    <i class="bi bi-info-circle me-2"></i>
                    This action will affect all staff assigned to this interval.
                </div>
            </div>
            <div class="modal-footer border-0 justify-content-center">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form id="deleteForm" method="post" style="display:inline;">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-danger">
                        <i class="bi bi-trash me-1"></i>Delete Interval
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            initializeIntervalTable();
        });
        // skrip tidak berubah
        function initializeIntervalTable() {
            /* ... */
        }
        function filterTable(query) { /* ... */ }
        function toggleView(view) { /* ... */ }
        function sortTable(sortBy) { /* ... */ }
        function updateResultCount() { /* ... */ }
        function exportIntervals() { /* ... */ }
        function confirmDelete(id, name) { /* ... */ }
    </script>
}

<style>
    /* Page Header */
    .page-header-modern { border-radius: .5rem; }
    .search-box-modern .form-control { width: 260px; }
    .search-clear { margin-left: -1px; }

    /* Stat Cards */
    .stat-card { background: #fff; border-radius: .5rem; box-shadow: 0 2px 6px rgba(0,0,0,.05); }
    .stat-icon { font-size: 2rem; color: inherit; }
    .stat-primary { color: #0062E6; border-left: .25rem solid #0062E6; }
    .stat-success { color: #28a745; border-left: .25rem solid #28a745; }
    .stat-warning { color: #ffc107; border-left: .25rem solid #ffc107; }
    .stat-info    { color: #17a2b8; border-left: .25rem solid #17a2b8; }
    .stat-number  { font-size: 1.75rem; font-weight: 700; }
    .stat-label   { font-size: .85rem; color: #6c757d; }
    .stat-trend i { font-size: 1.1rem; }

    /* Data Table */
    .data-table-container { background:#fff; border-radius:.5rem; box-shadow:0 2px 6px rgba(0,0,0,.03); padding:1rem; }
    .table-header   { border-bottom:1px solid #e9ecef; margin-bottom:1rem; }
    .view-toggle .btn.active { background:#0062E6; color:#fff; border-color:#0062E6; }
    .table-modern thead { background:#f8f9fa; }
    .table-modern tbody tr:hover { background:#f1f1f1; }
    .sort-icon { font-size:.75rem; color:#6c757d; }

    /* Table Rows */
    .id-badge { background:#e9ecef; border-radius:.25rem; padding:.25rem .5rem; font-family:monospace; }

    /* Months & Usage */
    .months-display { display:flex; align-items:center; gap:.5rem; }
    .months-number { font-size:1.25rem; font-weight:600; color:#343a40; }
    .months-label  { font-size:.85rem; color:#6c757d; }
    .usage-info    { text-align:center; }
    .usage-count   { font-size:1.1rem; font-weight:500; }
    .usage-label   { font-size:.75rem; color:#6c757d; text-transform:uppercase; }

    /* Grid Cards */
    .interval-card { background:#fff; border:1px solid #e9ecef; border-radius:.5rem; overflow:hidden; transition:transform .2s, box-shadow .2s; }
    .interval-card:hover { transform:translateY(-4px); box-shadow:0 4px 12px rgba(0,0,0,.1); }
    .interval-card-header { background:#f8f9fa; padding:1rem; }
    .interval-icon i { font-size:1.5rem; color:#0062E6; }
    .interval-card-body { padding:1rem; }
    .interval-card-footer { background:#f1f1f1; padding:.75rem 1rem; }

    /* Empty State */
    .empty-state { background:#f8f9fa; border-radius:.5rem; }
    .empty-state-icon i { font-size:3rem; color:#6c757d; }

    /* Modal */
    .modal-modern .modal-content { border-radius:.5rem; }
    .modal-icon-danger { font-size:2.5rem; }

    /* Buttons */
    .btn-glow { box-shadow: 0 0 .5rem rgba(255,255,255,.5); }
</style>
